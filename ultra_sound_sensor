import RPi.GPIO as GPIO
import time

# GPIO-Modus festlegen (BCM-Nummerierung)
GPIO.setmode(GPIO.BCM)

# Pinbelegung
TRIG = 17  # Trigger-Pin
ECHO = 27  # Echo-Pin

# Setze die Pins als Ausgang und Eingang
GPIO.setup(TRIG, GPIO.OUT)
GPIO.setup(ECHO, GPIO.IN)

# Eine Funktion, um die Entfernung zu messen
def measure_distance():
    # Setze Trigger auf LOW (sicherstellen, dass der Pin auf LOW ist)
    GPIO.output(TRIG, GPIO.LOW)
    time.sleep(2)

    # Trigger-Signal erzeugen (10 Mikrosekunden HIGH)
    GPIO.output(TRIG, GPIO.HIGH)
    time.sleep(0.00001)  # 10 Mikrosekunden
    GPIO.output(TRIG, GPIO.LOW)

    # Warte auf den Beginn des Echo-Signals
    while GPIO.input(ECHO) == GPIO.LOW:
        pulse_start = time.time()

    # Warte auf das Ende des Echo-Signals
    while GPIO.input(ECHO) == GPIO.HIGH:
        pulse_end = time.time()

    # Berechne die Zeitdifferenz
    pulse_duration = pulse_end - pulse_start

    # Berechne die Entfernung: Entfernung = (Dauer der Schallwelle * Schallgeschwindigkeit) / 2
    # Schallgeschwindigkeit = 34300 cm/s
    distance = pulse_duration * 34300 / 2  # Die Division durch 2, weil die Zeit für Hin- und Rückweg ist

    return distance

try:
    while True:
        distance = measure_distance()
        print(f"Entfernung: {distance:.2f} cm")
        time.sleep(1)

except KeyboardInterrupt:
    print("Messung gestoppt")
    GPIO.cleanup()  # GPIO-Pins zurücksetzen
